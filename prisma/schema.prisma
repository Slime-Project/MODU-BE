generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                     String          @id
  auths                  Auth[]      
  role                   UserRole        @default(USER)
  reviews                Review[]        @relation("UserReviews")
  wishlistItems          WishlistItem[]
}

model Auth {
  id                     Int             @id @default(autoincrement())
  userId                 String      
  user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken           String
  refreshTokenExp        DateTime
  kakaoAccessToken       String
  kakaoRefreshToken      String

  @@unique([userId, refreshToken])
}

model Product {
  id                     Int              @id @default(autoincrement()) 
  title                  String
  body                   String?          @db.Text
  img                    String?
  link                   String           @default("")
  price                  Int
  seller                 String
  createdAt              DateTime         @default(now())
  wishedCount            Int              @default(0)
  naverProductId         String?          @unique
  averageRating          Int              @default(0)
       
  reviews                Review[]         @relation("ProductReviews")
  wishlistItems          WishlistItem[]
  tags                   ProductTag[]
}

model Review {
  id                     Int              @id @default(autoincrement())
  productId              Int
  userId                 String      
  rating                 Int              @db.SmallInt
  text                   String      
  createdAt              DateTime         @default(now())
      
  user                   User             @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  product                Product          @relation("ProductReviews", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([id, productId])
  @@unique([productId, userId])
}

model GiftCollection {
  id                     Int              @id @default(autoincrement())
  wishlistItems          WishlistItem[]
}

model WishlistItem {
  id                     Int              @id @default(autoincrement())
  userId                 String
  productId              Int?
  giftCollectionId       Int?

  user                   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product                Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  giftCollection         GiftCollection?  @relation(fields: [giftCollectionId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([userId, giftCollectionId])
}

model Tag {
  id                     Int       @id @default(autoincrement())
  name                   String    @unique
  products               ProductTag[] 
}

model ProductTag {
  productId Int
  tagId     Int

  product   Product @relation(fields: [productId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([productId, tagId]) // 복합 기본키 설정
}